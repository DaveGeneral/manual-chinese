[[community-contributing-code]]
贡献代码给Neo4j
==========

[[community-contributing-code-intro]]
== 介绍 ==

Neo4j社区是一个以Neo4j图数据库的软件和组件为中心的免费软件和开源社区。
它由http://neotechnology.com[Neo Technology]赞助，它们提供基础设施（主机，文档等）和人员管理。

Neo4j社区是一个开放的社区，在迄今为止它表示对任何成员都欢迎，接受成员贡献的基本特性，并坚持社区的行为准则。

贡献是有很多形式的（文档，讨论，问题报告等）。
本文概述了对代码贡献者的管理规则。

[[community-contributing-code-governance-fundamentals]]
== 管理基础 ==

简而言之,如果你希望贡献代码那么你需要关注下面一些方面：

* 所有通过Neo4j项目发布的软件都必须遵守<<cla,贡献者许可协议>>。
* Neo4j是一个自由软件和开源社区。作为一个贡献者，你可以在http://fsf.org[自由软件组织]或者 http://opensource.org[开放源码倡议]批准的任何协议下，自由的安排你的工作时间。
  你仍然保留版权，因此，在该协议意外，你可以随时因为其他协议（例如一个拥有自主知识产权的许可）停止你的工作，而不只是始终Neo4j的项目上。
* Neo4j软件分成了很多个组件。
  一个Git源是一个或者多个组件。
* 源代码应该遵照Neo4j <<community-contributing-code-code-style,Code Style>>，并且尽可能的把指定组件的原因 ``fit in'' 进Neo4j相关文档里面。


[[community-contributing-code-contributor-roles]]
== 贡献者角色 ==

贡献代码的每一个人都有它的一个角色（一个人可以有多个角色）。
角色定义了他们的责任和权利：

* _patch submitter_ 允许提交补丁到一个已经存在的组件。
  细节请参考：<<community-contributing-code-workflow, 工作流程>>。
* _committer_ 可以直接贡献代码给一个或者多个组件。 
* _component maintainer_ 负责某个指定组件。
  他们可以：
** 提交代码到他们的组件的源里面。
** 管理源的标签。
** 授予推到源中的权利。
*  _Neo4j admin_ 管理Neo4j基础设施。
  他们可以：
** 定义一个新的组件并分配组件成员。
** 推动和引导项目开发。


[[community-contributing-code-workflow]]
== 贡献者的工作流程 ==

贡献到Neo4j的代码一般是按照下面的工作流程通过Github Pull Requests提交。
在Pull一个Request之前先浏览<<community-contributing-code-pull-requests,pull request checklist>>。

. fork适当的Github源。
. 为你的新特性或者修改创建一个新的分支。
. <<community-contributing-code-tests,为你的代码写单元测试哪怕是小小的修改>>.
. <<community-contributing-code-code-style,撰写代码>>.
. 撰写javadocs 和 <<community-docs,手册文档>>.
. <<community-contributing-code-commit-messages,提交更改>>.
. <<community-contributing-code-pull-requests,发送完整的request>>.


[[community-contributing-code-pull-requests]]
== Pull请求的检查列表 ==

. <<community-contributing-code-intro-the-fast-track,签署CLA>>.
. <<community-contributing-code-no-merging,确保你没有增加任何merge提交>>.
. <<community-contributing-code-single-commit,压缩你所有的提交到一个提交里面>>.
. <<community-contributing-code-no-merging,对最新的master分支进行rebase操作>>.
. <<community-contributing-code-tests,运行所有相关的测试>>.
. 发送请求!


[[community-contributing-code-tests]]
== 单元测试 ==

如果你提供一个更小的，可读的覆盖你的代码的单元测试给我们，你的提交会有更高的机会被我们采纳。
也要确保你的代码不会终端任何已经存在的测试。
 _注意有可能是下游的依赖你的改变的组件页需要进行测试_ 。

为了运行测试，使用Maven来代替你的IDE以确保其他人也能运行你的测试。
在任何组件中运行单元测试的命令是：`mvn clean validate`。


[[community-contributing-code-code-style]]
== 代码样式 ==

Neo4j代码样式维护在： https://github.com/neo4j/neo4j.github.com/tree/master/code-style[不同IDE下面的样式]。

[[community-contributing-code-commit-messages]]
== 提交备注信息 ==

请提供良好的提交信息。
用你的常识，特别是：

* 使用 _英文_。这包括正确的标点和拼写正确无误。
  提交的信息都应该传达一些一目了然的信息 -- 而不是详细描述。
* 记住一个提交是一个 _变更_ ，跨越许多潜在的文件，描述一个有凝聚力的变化。
  试试组织每一次提交都是一个逻辑改变。
  解释改变了什么。
  如果你必须重复工作，你可能想正提交一个pull reqeust之前清理你的提交。  
* 如果你修改了一个bug或者一个问题是有关某一个标签的，请在消息中关联到这个标签。
  举个例子， _``Added this and then changed that. This fixes #14.''_
  在评论中只提及 #xxx也是正确的，因为那个数字是Github的问题编号，详细请参考： https://github.com/blog/831-issues-2-0-the-next-generation[GitHub issues]。
  这些同义词也是可以的：
  ** fixes #xxx
  ** fixed #xxx
  ** fix #xxx
  ** closes #xxx
  ** close #xxx
  ** closed #xxx.
* 记住传达你的意图。
  不要概述也不要台详细。
  只需要能用`git diff`区分就可以了。


[[community-contributing-code-intro-the-fast-track]]
== 签署CLA ==

贡献的一个关键方面是：<<cla,Contributor License Agreement>>。

简而言之：确保签署CLA，否则Neo4j项目无法接收你的贡献。


[[community-contributing-code-no-merging]]
== 不要使用merge,而用rebase代替! ==

因为我们想每一个贡献的都被包含在一个单一的提交里面，在内部上拉的请求中采用合并提交是不允许。
合并是凌乱，而且只应在必要时使用，例如。当一个分支合并到master为了记住的代码来自哪里时。

如果你想用来自master分支的最新的更改更新到你的开发分支，请使用git的rebase。
要了解关于如何使用rebase,请参考Git手册： http://git-scm.com/book/en/Git-Branching-Rebasing[the Git Manual]。


[[community-contributing-code-single-commit]]
== 单个提交 ==

如果你有多个提交，你应该压缩他们成一个，除非他们有一些特殊的原因而不能合并。

保持你的更改正单个提交里面，让提交历史早于阅读它，这样可以使还原和移动操作更容易。

这样做的一个方法是当你的在本地分支上完成修改后，创建一个新的分支，然后把你的提交都rebase到这个新的分支从而合并成一个提交。

.与Git进行rebase交互
[source,shell]
--------------------------------------------
# 切换到分支：mychanges
git checkout -b mychanges-clean

# 假设你想合并最近的4个提交，只需要rebase最近的4个提交即可：
git rebase -i HEAD~4

# 在git给你的对话框中，保持在第一个提交上面并压缩其他在它上面了。
# 然后改写提交描述来准确地描绘出你的提交

# 如果一切正常，会出现这样的数字: #760
--------------------------------------------

要了解更多git细节，请参考： http://git-scm.com/book/en/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages 。

如果你被要求修改你的代码的某些部分，请切换到你的original分支（这个分支有多个提交），然后按照上面的要求创建一个修复bug的单独提交）。

