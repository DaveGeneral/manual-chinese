[[community-docs]]
撰写Neo4j开发文档
===========

注意：比起撰写文档，你也可以通过在 http://docs.neo4j.org/chunked/snapshot/[在线HTML版本]页面提交评论来帮助我们。

要获取如何编译手册，请参考：https://github.com/neo4j/manual/blob/master/README.asciidoc[编译说明]。

文档采用了asciidoc格式，请参考：

* http://www.methods.co.nz/asciidoc/[Aciidoc 参考手册]
* http://powerman.name/doc/asciidoc[AsciiDoc 速记卡]

这个速记卡真的非常棒!

[[community-docs-overall-flow]]
== 总体流程 ==

每一个项目或者子项目都有它自己的文档，会生成到一个'docs.jar'文件中。
默认情况下，这个文件从'src/docs/'目录的内容组装而成。
Asciidoc文档的扩展名是 +.txt+ 。

文档可以使用来自项目的扩展代码的代码片段。
相应的代码必须部署到'sources.jar' 或者 'test-sources.jar'文件中。

通过建立相应的单元测试，文档可以正JavaDoc备注中直接书写。

上面的文件都用来构建手册（通过增加它们作为依赖）使用。
为了得到包括在手册中的内容，它必须被明确列入是手册中的文件。

注意为不同场景增加文档工作的不同方法：

* 为了生成详细的文档， 必须把文档写来作为单元测试的一部分（包括在JavaDoc中）。
  在这种情况下，你一般不想在文档中链接到源代码。  
* 为了教学级的文档，通过书写一个 +.txt+ 的文件来包括在文本中是最好的方式。
  源码片段和输出范例都能从那个地方引入。
  在这种情况下，你一般想链接到源代码，而用户应该能不用任何额外的设置就可以运行它。

== 在'docs.jar'中的文件结构 ==

[options="header", cols="e,d"]
|========================
| 目录 | 内容
| dev/ | 面向开发人员的内容
| dev/images/ | 面向开发人员的内容需要的图片
| ops/ | 面向管理员的内容
| ops/images/ | 面向管理员的内容需要的图片
| man/ | 联机帮助页
|========================

额外子目录被用来作为文档所必须的结构，比如'dev/tutorial/'，'ops/tutorial/'等等。


== 标题和文档结构 ==

每一个文档都带有标题并从等级0开始。
每一个文档应该有一个ID。
在一些情况下，在文档中的片段也需要它们的ID，这依赖与它们是否会填充到整体结构中。
为了能链接到这些内容，必须有一个ID。
在强制性地方如果缺少ID在构建时将会失败。

这是一个文档的开始：

[source]
----
[[unique-id-verbose-is-ok]]
文档标题
====
----

为了把标题放到正确的等级下面，当在一个文件中引入另外文件时，属性 +leveloffset+ 将会被使用。

Subsequent headings in a document should use the following syntax:

[source]
----
== 二级标题 ==

... 这是内容 ...

=== 三级标题 ===

这是内容 ...

----

Asciidoc对头部分的语法不止一个，但在这个项目中它不会被使用。

== 撰写 ==

一行写一句。
这让很容易移动内容，并且很容易分拆长句。

== 陷阱 ==

* 一个章节不能是空的。 (构建时做 docbook xml合法性校验时会失败)。
* 文档标题应该有下划线，由与标题字符个数相同的 +=+ 组成。
* 在文档末尾总是留一个空行（或者说下一个文档的标题会在文档的最后一段后结束）。
* 因为 +{}+ 用来作为Asciidoc的属性，每一个内嵌正里面的都被认为是一个属性。
  当你必须用它的时候，请使用：+\\{+。
  如果你不这样做，在没有任何提示或者警告的情况下，括号里面的文字会被移除。

== 链接 ==

为了链接到手册给定Id的其他部分，下面展示如何链接到一个参考页面：

[source]
----
<<community-docs-overall-flow>>
----

输出结果：<<community-docs-overall-flow>>

[NOTE]
只需要简单写 "看 \<<target-id>>" ，在大多数情况下，这应该足够。

如果你修养链接到其他你自定义链接文本的文档，如下操作：

[source]
----
<<target-id, link text that fits in the context>>
----

NOTE: 有大量的链接文本在web环境工作得很好但普通文本用于打印，而我们的目标是两个都可以。

外部链接如下：

[source]
----
http://neo4j.org/[Link text here]
----

输出像这样： http://neo4j.org/[Link text here]

对于一个短地址可能不需要增加链接文本，像这样：

[source]
----
http://neo4j.org/
----

输出像这样： http://neo4j.org/

NOTE: 在链接后面有一个标点符号是不受影响的，它不会被认为是链接的一部分。

== 文本格式 ==

* \_Italics_ 显示为 _Italics_ 表示重点。
* \*Bold* 显示为 *Bold* 用来加强，仅用于加强重点。
* \+methodName()+ 显示为 +methodName()+ 也被用于文字（注意：在 `+` 符号之间的文字 _会_ 被解析）。
* \`command` 显示为 `command` (一般用于命令行)。
  （注意：在 +`+ 符号之间的文字 _会_ 被解析）。  
* \'my/path/' 显示为 'my/path/' (用来表示文件名或者路径)。
* \\``Double quoted'' (that is two grave accents to the left and two acute accents to the right) 表示为 ``Double quoted''。
* \`Single quoted' (that is a single grave accent to the left and a single acute accent to the right) 表示为 `Single quoted'。

== 告诫 ==

这些非常有用而且应该正适合的地方使用。
从下面选择进行使用（保持全部都大写或者都不）：


NOTE: 注意。

TIP: 提示。

IMPORTANT: 重要。

CAUTION: 注意。

WARNING: 警告。

这儿是它们的范例:

[source]
----
NOTE: Note.
----

多行输出：

[source]
----
[TIP]
Tiptext.
Line 2.
----

输出效果：

[TIP]
Tiptext.
Line 2.

== 图片 ==

IMPORTANT: _正整个手册中的图片都有相同的命名空间。_
  你指定如何管理控制它们。

=== 图片文件 ===

为了引入一个图片文件，确保图包括在文档目录的子目录'images/'中，然后，你可以：

[source]
----
image::neo4j-logo.png[]
----

输出结果：

image::neo4j-logo.png[]

=== 静态的Graphviz/ DOT ===

我们使用Graphviz/DOT语言来描述图数据库。
要获取更多的细节，请参考：http://graphviz.org/。

这是如何引入一个简单范例数据库：

[source]
----
 ["dot", "community-docs-graphdb-rels.svg"]
 ----
 "开始节点" -> "结束节点" [label="关系"]
 ----
----

输出结果：

["dot", "community-docs-graphdb-rels.svg"]
----
"Start node" -> "End node" [label="relationship"]
----

这儿是一个在构建中使用一些预置参数的范例：

[source]
----
 ["dot", "community-docs-graphdb-rels-overview.svg", "meta"]
 ----
 "A Relationship" [fillcolor="NODEHIGHLIGHT"]
 "Start node" [fillcolor="NODE2HIGHLIGHT"]
 "A Relationship" -> "Start node" [label="has a"]
 "A Relationship" -> "End node" [label="has a"]
 "A Relationship" -> "Relationship type" [label="has a"]
 Name [TEXTNODE]
 "Relationship type" -> Name [label="uniquely identified by" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
 ----
----

输出结果：

["dot", "community-docs-graphdb-rels-overview.svg", "meta"]
----
"A Relationship" [fillcolor="NODEHIGHLIGHT"]
"Start node" [fillcolor="NODE2HIGHLIGHT"]
"A Relationship" -> "Start node" [label="has a"]
"A Relationship" -> "End node" [label="has a"]
"A Relationship" -> "Relationship type" [label="has a"]
Name [TEXTNODE]
"Relationship type" -> Name [label="uniquely identified by" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
----

传递给点过滤器的可选第二个参数定义了使用的风格：
* 当没定义时: 节点空间的默认样式。
* +neoviz+: 通过Neoviz生成节点空间样式。
* +meta+: 图数据库不会显示内容，更像是展示概念。

CAUTION: DOT语言的关键字用于其他用途时，必须用双引号括起来。
  关键字包括： _node， edge， graph， digraph， subgraph，_ 和 _strict_.


== 属性 ==

你能在文档中使用的普通属性：

* \{neo4j-version} - 表示为 "{neo4j-version}"
* \{neo4j-git-tag} - 表示为 "{neo4j-git-tag}"
* \{lucene-version} - 表示为 "{lucene-version}"

这些可以用来替代指向范例 APIDocs或者源代码的URL的部分。
注意neo4j-git-tag也能控制snapshot/master。

能被使用的Asciidoc范例属性：

* \{docdir} - 指向文档的根目录
* \{nbsp} - 不间断空格

== 备注 ==

有一个独立的构件来引入备注。
备注用一个黄色背景表示。
默认它是不会被构建的，但在一个普通构建之后，你可以使用 `make annotated` 来构建它。
你也能使用结果页来搜索内容，以及在一个单页面上的完整手册。

下面是范例：

[source]
----
// this is a comment
----

备注在一般构建结果文档中是不可见的。
备注块根本不会包括在任何构建输出里面。
这是一个范例：

[source]
----
////
Note that includes in here will still be processed, but not make it into the output.
That is, missing includes here will still break the build!
////
----


== 代码片段 ==

=== 在文件中明确定义 ===

WARNING: 尽可能少的使用代码片段。
  众所周知的，它们以及很长时间没有更新了。

下面是范例：

[source]
----
 [source,cypher]
 ----
 start n=(2, 1) where (n.age < 30 and n.name = "Tobias") or not(n.name = "Tobias")  return n
 ----
----

输出结果：

[source,cypher]
----
start n=(2, 1) where (n.age < 30 and n.name = "Tobias") or not(n.name = "Tobias")  return n
----

如果没有合适的高亮语法，就省略语言设置： +[source]+。

目前下面的语言的高亮是支持的：

* Bash
* Cypher
* Groovy
* Java
* JavaScript
* Python
* XML

更多我们能使用的高亮语言，请参考： http://alexgorbatchev.com/SyntaxHighlighter/manual/brushes/。


=== 源代码中抽取 ===

代码可以自动的从源文件中抽取。
你需要定义：

* component: Maven坐标的 +artifactId+ 。
* source: 指向部署的jar文件的文件路径。
* classifier: +sources+ 或者 +test-sources+ 或者任何指向构件的分类。
* tag: 用于搜索文件的tag标签。
* 代码语言，如果需要相应的语法高亮显示。

注意构件必须作为一个手册项目的Maven依赖被引入以便文件可以被找到。

会在+开始片段: {tag}+ 和 +结束片段: {tag}+ 之间搜索文件，这些行将被输出。
注意标签“ABC”将匹配“ABCD”。
有一个非常简单的 on/off开关，让多个出现的装配进一个单独的代码片段输出。
这个行为能被用户用来当来自代码范例测试的时候隐藏断言。

这是一个定义如何包含代码片段的范例：

[source]
----
 [snippet,java]
 ----
 component=neo4j-examples
 source=org/neo4j/examples/JmxTest.java
 classifier=test-sources
 tag=getStartTime
 ----
----

输出结果：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/JmxTest.java
classifier=test-sources
tag=getStartTime
----


=== 查询结果 ===

对于Cypher查询结果有一个特殊的过滤器。
这是如何标记一个查询结果：

[source]
----
 .结果
 [queryresult]
 ----
 +----------------------------------+
 | friend_of_friend.name | count(*) |
 +----------------------------------+
 | Ian                   | 2        |
 | Derrick               | 1        |
 | Jill                  | 1        |
 +----------------------------------+
 3 rows, 12 ms
 ----
----

输出结果：

.结果
[queryresult]
----
+----------------------------------+
| friend_of_friend.name | count(*) |
+----------------------------------+
| Ian                   | 2        |
| Derrick               | 1        |
| Jill                  | 1        |
+----------------------------------+
3 行, 12 毫秒
----


== 基于文档测试的一个简单Java范例 ==

对于Java来说，有几个预置工具用来保持代码和文档都在Javadocs和代码片段中，这些代码片段生成了其它工具的的Asciidoc文档。

为了说明这个，看看下面的文档，用文件  +hello-world-title.asciidoc+ 生成的内容是：

[source]
------------------------------
include::{docdir}/examples/examples/hello-world-sample-chapter.asciidoc[]
------------------------------

这个文件通过下面的代码被引入到这个文档中：

[source]
----
  :leveloffset: 3
  include::{docdir}/examples/examples/hello-world-sample-chapter.asciidoc[] 
----

输出结果：

:leveloffset: 3

include::{docdir}/examples/examples/hello-world-sample-chapter.asciidoc[]

:leveloffset: 2

== 集成远程控制台 ==

一个交互控制台可以被新增并出现正在线HTML版本中。
一个可选的标题被增加，用于按钮的文本。

这里是做法，使用Geoff来定义数据，使用空行来从查询中分割它们：

[source]
----
 .与黑客帝国交互的范例
 [console]
 ----
 (A) {"name" : "Neo"}; 
 (B) {"name" : "Trinity"};
 (A)-[:LOVES]->(B)

 start n = node(*)
 return n
 ----
----

输出结果:

.与黑客帝国交互的范例
[console]
----
(A) {"name" : "Neo"};
(B) {"name" : "Trinity"};
(A)-[:LOVES]->(B)

start n = node(*)
return n
----



== 工具链 ==

当配置docbook工具链时一些有用的链接：

* http://www.docbook.org/tdg/en/html/docbook.html
* http://www.sagehill.net/docbookxsl/index.html
* http://docbook.sourceforge.net/release/xsl/1.76.1/doc/html/index.html
* http://docbook.sourceforge.net/release/xsl/1.76.1/doc/fo/index.html


