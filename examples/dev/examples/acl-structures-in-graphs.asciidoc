[[examples-acl-structures-in-graphs]]
在图数据库中的ACL结构模型
==============

这个范例对于在图数据库中控制ACL给了一个通用方法概述，
和一个具体查询的简单范例。

== 通用方法 ==

在许多场景，一个应用需要控制某些管理对象的安全。
这个范例描述了一个管理这些的一个模式，
通过在一个图中建立一个对任何管理对象的完整权限结构。
这导致产生一个基于位置和管理对象上下文的动态结构。

这个结果是一个很容易正图结构中实现的复杂安全规划。
支持权限重载，规则和内容组件，而不用复制数据。

image::ACL.png[scaledwidth="100%"]

=== 技术 ===

就像范例图布局看到的一样，在这个领域模型中有如下一些要点：

* 管理内容（文件和目录）通过 +HAS_CHILD_CONTENT+ 连接

* 主要子树通过 +PRINCIPAL+ 关系指出能作为ACL成员的规则

* 规则聚合成组，通过 +IS_MEMBER_OF+ 关系连接，我们的规则可以同时属于多个组。

* +SECURITY+ -- 一个关系，连接内容组件到规则组件，附带一个可以修改和删除的属性： ("++RW+")。


=== 构建ACL ===
将穿越
对于任何给定的ACL管理节点（内容）的有效权限（如读，写，执行）的计算
都将遵循一系列被编码的权限遍历的规则。


=== 自顶向下的遍历 ===

这个方案将让你在根内容上面定义一个通用的权限模式，
而后提取出指定的子内容节点和指定的规则。

. 从内容节点开始向上移动直到内容根节点以找到它的路径。
. 从一个"所有允许的"有效的乐观权限列表开始
（ +111+ 是以BIT位编码表示读写执行情况）。
. 从最上面的内容节点开始，查找在它上面有任何 +SECURITY+ 关系的节点。
. If found, look if the principal in question is part of the end-principal of the +SECURITY+ relationship.
. If yes, add the "+++" permission modifiers to the existing permission pattern, revoke the "+-+" permission modifiers from the pattern.
. If two principal nodes link to the same content node, first apply the more generic prinipals modifiers.
. Repeat the security modifier search all the way down to the target content node, thus overriding more 
  generic permissions with the set on nodes closer to the target node.

相同的算法也适用于自下而上的方案，
基本上只是从目标内容节点向上遍历
和在遍历器向上时应用动态安全修饰符。


=== 范例 ===

现在，为了得到访问权限的结果，
比如 在文件 "+My File.pdf+" 上的用户 "+user 1+" 处于一个自上而下方案中时，在图数据库中的模型应该如下：

. Traveling upward, we start with "+Root folder+", and set the permissions to +11+ initially (only considering Read, Write).
. There are two +SECURITY+ relationships to that folder.
  User 1 is contained in both of them, but "+root+" is more generic, so apply it first then "+All principals+" `+W` `+R` -> +11+.
. "+Home+" has no +SECURITY+ instructions, continue.
. "+user1 Home+" has +SECURITY+.
  First apply "+Regular Users+" (`-R` `-W`) -> +00+, Then "+user 1+" (`+R` `+W`) -> +11+.
. The target node "+My File.pdf+" has no +SECURITY+ modifiers on it, so the effective permissions for "+User 1+" on "+My File.pdf+" are +ReadWrite+ -> +11+.

== 读取权限范例 ==

在这个范例中，我们将解释一个  +directories+ 和 +files+ 的树结构。
也包括拥有这些文件的用户以及这些用户的角色。
角色可以作用于目录或者文件结构上
（相对于完整的 +rwx+ Unix权限，这儿我们只考虑 +canRead+），
而且可以被继承。
一个定义ACL架构的更彻底的范例可以在这找到：http://www.xaprb.com/blog/2006/08/16/how-to-build-role-based-access-control-in-sql/[如何在SQL中建立基于角色控制的权限系统]。

include::ACL-graph.asciidoc[]

=== 在目录结构中查找所有的文件 ===

为了找到包含正这个结构中的所有文件，我们需要一个可变长度查询，
找到跟随了关系 +contains+ 的节点，
并返回关系 +leaf+ 另外一端的节点。

[source,cypher]
----
START root=node:node_auto_index(name = 'FileRoot')
MATCH root-[:contains*0..]->(parentDir)-[:leaf]->file
RETURN file
----

输出结果：

[queryresult]
----
+------------------------+
| file                   |
+------------------------+
| Node[11]{name:"File1"} |
| Node[10]{name:"File2"} |
+------------------------+
2 行
163 毫秒

----

=== 谁拥有哪些文件？ ===

如果我们引入了文件的所有权概念，然后我们要求找到我们找到的文件的拥有者 -- 
通过 +owns+ 关系连接到文件节点的。

[source,cypher]
----
START root=node:node_auto_index(name = 'FileRoot')
MATCH root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user
RETURN file, user
----

返回在 +FileRoot+ 节点下面的所有文件的拥有者。

[queryresult]
----
+------------------------------------------------+
| file                   | user                  |
+------------------------------------------------+
| Node[11]{name:"File1"} | Node[8]{name:"User1"} |
| Node[10]{name:"File2"} | Node[7]{name:"User2"} |
+------------------------------------------------+
2 行
3 毫秒

----


=== 谁可以访问这个文件？ ===

如果我们现在想检查下哪些有用可以读取所有文件，可以定义我们的ACL如下：

* 根目录授权无法访问。
* 任何用户都被授予了一个角色 +canRead+ ，允许访问一个文件的上级目录中任何一个。

为了找到可以读取上面的文件的父文件夹层次结构中的任何部分的用户，
Cypher提供了可选的可变长度的路径。

[source,cypher]
----
START file=node:node_auto_index('name:File*')
MATCH file<-[:leaf]-()<-[:contains*0..]-dir<-[?:canRead]-role-[:member]->readUser
RETURN file.name, dir.name, role.name, readUser.name
----

这将返回 +file+ ， 拥有 +canRead+ 权限的目录，
以及 +user+ 本身以及他们的 +role+ 。

[queryresult]
----
+----------------------------------------------------+
| file.name | dir.name   | role.name | readUser.name |
+----------------------------------------------------+
| "File2"   | "Desktop"  | <null>    | <null>        |
| "File2"   | "HomeU2"   | <null>    | <null>        |
| "File2"   | "Home"     | <null>    | <null>        |
| "File2"   | "FileRoot" | "SUDOers" | "Admin1"      |
| "File2"   | "FileRoot" | "SUDOers" | "Admin2"      |
| "File1"   | "HomeU1"   | <null>    | <null>        |
| "File1"   | "Home"     | <null>    | <null>        |
| "File1"   | "FileRoot" | "SUDOers" | "Admin1"      |
| "File1"   | "FileRoot" | "SUDOers" | "Admin2"      |
+----------------------------------------------------+
9 行
84 毫秒

----

这个结果列出了包含 +null+ 值的路径片段，
它们能通过一些查询来缓解或者只返回真正需要的值。


