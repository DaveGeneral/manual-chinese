[[tutorials-java-embedded-social]]
社交网络
====

注意: 下面的范例使用了处于实验阶段的遍历查询API。

社交网络（在互联网上也被称为社交图）是天然的用图来表示的模型。
下面的范例演示了一个非常简单的社交模型，它连接了朋友并关注了好友动态。

[TIP]
范例源代码下载地址：
https://github.com/neo4j/community/tree/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/socnet[socnet]

== 简单的社交模型 ==

image::socnet-model.png[title="社交网络数据模型", scaledwidth="60%"]

一个社交网络的数据模型是简漂亮的：有名称的 +Persons+ 和有时间戳文本的 +StatusUpdates+ 。
这些实体然后通过特殊的关系连接在一起。

* +Person+
** +friend+: 连接两个不同 +Person+ 实例的关系 (不能连接自己)
** +status+: 连接到最近的 +StatusUpdate+
* +StatusUpdate+
** +next+: 指向在主线上的下一个 +StatusUpdate+ ，是在当前这个状态更新之前发生的

== 状态图实例 ==

一个 +Person+ 的 +StatusUpdate+ 列表 是一个链表。
表头（最近动态）可以通过下一个 +status+ 找到。
每一个随后的 +StatusUpdate+ 都通过关系 +next+ 相连。

这是一个 Andreas Kollegger 微博记录图早上走路上班的范例：

["dot", "andreas-status-updates.svg"]
----
graph [rankdir="TB"]
andreas [label="Andreas Kollegger", fillcolor="NODEHIGHLIGHT"]
status1 [label="started designing this graph model\n9:30 am"]
status2 [label="rode my awesome Skeppshult to work\n8:45 am"]
status3 [label="is getting used to muesli for breakfast\n8:00 am"]
andreas -> status1 [label="status"]
status1 -> status2 [label="next"]
status2 -> status3 [label="next"]
----

为了读取状态更新情况，我们可以创建一个遍历查询，比如：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/socnet/Person.java
classifier=sources
tag=getStatusTraversal
----

这给了我们一个遍历查询，它将从一个 +StatusUpdate+ 开始，并一直跟随状态的主线直到它们运行结束。
遍历查询是懒加载模式所以当我们处理成千上万状态的时候性能一样很好 -- 除非我们真实使用它们，否在它们不会被加载。

== 活动流 ==

一旦我们有了朋友，而且它们有了状态消息，我们可能想读取我们的朋友的消息动态，按时间倒序排列 -- 最新的动态在前面。
为了实现这个，我们可以通过下面几个步骤：

. 抓取所有的好友动态放入一个列表 -- 最新的排前面。
. 对列表进行排序。
. 返回列表中的第一个记录。
. 如果第一个迭代器为空，则把它从列表移除。否则，在这个迭代器中获取下一个记录。
. 跳转到步骤2直到在列表中没有任何记录。

这个队列看起来像http://www.slideshare.net/systay/pattern-activity-stream[这样]。


代码实现像这样：

[snippet,java]
----
component=neo4j-examples
source=org/neo4j/examples/socnet/FriendsStatusUpdateIterator.java
classifier=sources
tag=getActivityStream
----
	

