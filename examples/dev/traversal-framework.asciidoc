[[tutorial-traversal]]
遍历查询框架
======


在Java中的 http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/package-summary.html[Neo4j Traversal API]是基于回调机制的，懒加载执行的。
一些遍历查询范例收集正这里：<<tutorials-java-embedded-traversal>>。

在Neo4j中其他一些遍历和查询方式还有##cypher-query-lang,Cypher## 和 ##gremlin-plugin,Gremlin##。

[[tutorial-traversal-concepts]]
== 主要观点 ==

下面对各种修改遍历描述对象的方法进行一个简短的说明。

* _Expanders_ -- 定义遍历的内容，特别是关系的方向和类型。
* _Order_ -- 比如宽度优先或者深度优先。
* _Uniqueness_ -- 只访问一次节点（关系，路径）。
* _Evaluator_ -- 决定返回的内容以及在超过当前位置是否继续遍历。
* _Starting nodes_ 决定遍历的起点。

["dot", "graphdb-traversal-description.svg", "meta", scaledwidth="100%"]
----
"Traversal Description" [fillcolor="NODEHIGHLIGHT"]
Uniqueness -> "Traversal Description" [label="avoid duplicates"]
Evaluator -> "Traversal Description" [label="return and prune policy"]
Order -> "Traversal Description" [label="where to go next"]
Expander -> "Traversal Description" [label="what to traverse"]

"Depth First" [TEXTNODE]
"Breadth First" [TEXTNODE]
"Relationship Type" [TEXTNODE]
"Direction" [TEXTNODE]
"Unique Nodes" [TEXTNODE]
"Unique Relationships" [TEXTNODE]
"Unique Paths" [TEXTNODE]
"None" [TEXTNODE]
"Include/Exclude" [TEXTNODE]
"Prune/Continue" [TEXTNODE]

"Depth First" -> Order [dir="back"]
"Breadth First" -> Order [dir="back"]

Expander -> "Relationship Type"
"Direction" -> Expander [dir="back"]

"Unique Nodes" -> Uniqueness [dir="back"]
"Unique Relationships" -> Uniqueness [dir="back"]
"Unique Paths" -> Uniqueness [dir="back"]
"None" -> Uniqueness [dir="back"]

"Include/Exclude" -> Evaluator [dir="back"]
Evaluator -> "Prune/Continue"

Traverser [fillcolor="NODE2HIGHLIGHT"]
"A Node" [fillcolor="NODEHIGHLIGHT"]
"Traversal Description" -> Traverser [dir="back" label="applies" weight=3.0]
"A Node" -> Traverser [label="starting point of"]
Traverser -> Paths [label="result as"]
Traverser -> Nodes [label="result as"]
Traverser -> Relationships [label="result as"]

{ rank="same"; Traverser; "A Node" }
----

See <<tutorial-traversal-java-api>> for more details.

[[tutorial-traversal-java-api]]
== 遍历查询框架 Java API ==

除了 +Node+ 和 +Relationship+ 遍历查询框架还包括一些主要的接口: +TraversalDescription+，+Evaluator+，+Traverser+ 和 +Uniqueness+ 是一些主要的。
 +Path+ 接口在遍历中还有一个特殊的用途，因为当评估该位置时它常被用来表示在图中的一个位置。
此外，+PathExpander+ (代替 +RelationshipExpander+) 和 +Expander+ 接口是遍历框架中的核心，但API的用户很少需要自己去实现它们。
对于高级应用，也有一个设置接口，当需要精确控制遍历的顺序的时候，可以采用：+BranchSelector+, +BranchOrderingPolicy+ 和 +TraversalBranch+。

=== TraversalDescription ===
http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html[+TraversalDescription+]是用来定义和初始化遍历查询的非常重要的接口。
这并不是说要用户去实现遍历查询框架，而是相对于有框架提供的实现来说，这提供了一个用户自定义查询条件的方法。
+TraversalDescription+ 实例是不可改变的而它的方法返回一个新的 +TraversalDescription+ 实例是可以改变的。
+TraversalDescription+ instances are immutable and its methods returns a new +TraversalDescription+ that is modified compared to the object the method was invoked on with the arguments of the method.

==== Relationships ====

增加一个关系类型到遍历的关系类型列表中。
默认情况下，这个列表是空的，意味着默认会返回 _所有类型_ 的关系，而不考虑类型。
如果有关系被加入到这个列表中，那就意味着 _只有_ 列表中的关系才会被遍历。
有两个方法，一个是http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#relationships[包括方向] ，另外一个是http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#relationships[排除方向]，这个方法中遍历关系是http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/Direction.html#BOTH[双向]的。

=== Evaluator ===

大量的http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/Evaluator.html[+Evaluator+]是用来决定在每一个位置（用一个 +Path+ 表示）：是应该继续遍历查询以及节点是否包括在结果中。
对于一个给定的 +Path+，它要求对遍历查询分支采用下面四个动作中的一种：

* +Evaluation.INCLUDE_AND_CONTINUE+: 包括这个节点在结果中并且继续遍历查询。
* +Evaluation.INCLUDE_AND_PRUNE+: 包括这个节点在结果中并且继续不遍历查询。
* +Evaluation.EXCLUDE_AND_CONTINUE+: 排除这个节点在结果中并且继续遍历查询。
* +Evaluation.EXCLUDE_AND_PRUNE+: 排除这个节点在结果中并且继续不遍历查询。

Evaluator可以加入多个。注意Evaluator将被遍历过程中遇到的每一个位置所调用，甚至包括起点节点。

=== Traverser ===

http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/Traverser.html[+Traverser+] 对象是调用一个 TraversalDescription 的http://components.neo4j.org/neo4j-kernel/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#traverse(org.neo4j.graphdb.Node)[+traverse()+]方法返回的结果。

它表示正一个图数据库中遍历的位置集合和结果格式化的一个规范。
实际的遍历在每次的执行中都是懒加载的，只有当我们调用 +Traverser+ 的方法 +next()+ 时才会被真正执行。

=== Uniqueness ===

在http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Uniqueness.html[+Uniqueness+]中说明了一个设置规则，这个规则决定在一个遍历期间如何访问已经访问过的位置策略。
默认规则是 http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Uniqueness.html#NODE_GLOBAL[+NODE_GLOBAL+]。

一个 Uniqueness能提供给TraversalDescription,用来决定一个遍历是否重新可以访问相同的位置。不同的策略级别可以使用：

* +NONE+：在图数据库中任何节点都可以被重访。
* +NODE_GLOBAL+ uniqueness：在图数据库中每个节点只能被访问一次。这会潜在的消耗大量的内存因为图要求保持一个内存中的数据结构用来保存所有被访问过的节点。
* +RELATIONSHIP_GLOBAL+ uniqueness：在图数据库中每个关系只能被访问一次。这会潜在的消耗大量的内存因为图中一般关系的数量远远大于节点的数量。这种级别的内存开销会增长得更快。
* +NODE_PATH+ uniqueness：一个节点不能在之前的遍历路径中出现过。
* +RELATIONSHIP_PATH+ uniqueness：一个关系不能在之前的遍历路径中出现过。
* +NODE_RECENT+ uniqueness：这是 +NODE_GLOBAL+ uniqueness 的简化版，有一个全局访问过的节点集合在每个位置进行核对。这种级别不会消耗大量的内存因为这个集合只会包含最近访问过的节点。这个集合的尺寸可以通过方法 +TraversalDescription.uniqueness()+ 的第二个参数来指定。
* +RELATIONSHIP_RECENT+ uniqueness：跟节点类似，只是换成关系而已。


==== Depth First / Breadth First ====

有很多方法可以设置顺序的 +BranchSelector+|+ordering+ 策略：http://en.wikipedia.org/wiki/Depth-first_search[depth-first]/ http://en.wikipedia.org/wiki/Breadth-first_search[breadth-first]。
相同的结果可以通过调用http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html#preorderDepthFirst[+Traversal+] http://components.neo4j.org/neo4j-kernel/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html#preorderBreadthFirst[+factory+]的http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#order[+order+]，也可以新建自己的 +BranchSelector+/+BranchOrderingPolicy+ 并传入完成。

=== Order -- 如何穿过分支呢？ ===

depthFirst/breadthFirst 方法的普通版本是允许一个任意的http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/BranchOrderingPolicy.html[+BranchOrderingPolicy+]注入到TraversalDescription。


=== BranchSelector ===

一个BranchSelector是用来定义如何选择遍历下一个分支。这被用来实现遍历顺序。遍历框架提供了一些基本的顺序实现：

* +Traversal.preorderDepthFirst()+: 深度优先，在访问的子节点之前访问每一个节点。
* +Traversal.postorderDepthFirst()+: 深度优先，在访问的子节点之后访问每一个节点。
* +Traversal.preorderBreadthFirst()+: 宽度优先，在访问的子节点之前访问每一个节点。
* +Traversal.postorderBreadthFirst()+: 宽度优先，在访问的子节点之后访问每一个节点。

注意：请注意宽度优先遍历策略比深度优先策略消耗更多的内存。

BranchSelectors带有状态信息因此需要正每一次遍历的时候都被唯一实例化。因此，它被通过一个BranchOrderingPolicy接口来提供给TraversalDescription，而它是一个BranchSelector实例化工厂。

遍历查询框架的用户很少需要实现图自己的BranchSelector 和 BranchOrderingPolicy，它们让图形算法实现者提供它们自己的遍历顺序。Neo4j图算法包包含了一个最好优先（BestFirst）的BranchSelector/BranchOrderingPolicy实现，常用于A* 和 Dijkstra 算法中。

==== BranchOrderingPolicy ====

它是一个工厂，用来创建BranchSelectors决定哪些分支需要返回（一个分支的位置常用 http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/Path.html[+Path+] 来表示）。一般策略是 http://components.neo4j.org/neo4j-kernel/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#depthFirst()[+depth-first+] 和 http://components.neo4j.org/neo4j-kernel/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#breadthFirst()[+breadth-first+]。
举个例子，调用 http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalDescription.html#depthFirst()[+TraversalDescription#depthFirst()+]等价于：

[source,java]
----
description.order( Traversal.preorderDepthFirst() );
----

==== TraversalBranch ====

被BranchSelector使用的一个对象用来从一个给定的分支获取更多分支。本质上，有一个由一个路径 和一个RelationshipExpander组成，RelationshipExpander能被用来从当前的分支获取新的http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/traversal/TraversalBranch.html[+TraversalBranch+]。

=== Path ===

一个http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/graphdb/Path.html[+Path+]是Neo4j API中的一个普通接口。
在Neo4j遍历查询API中，+Path+ 的用法有两方面。
Traversers可以以 +Path+的形式返回它们在图中被标记为要返回的结果。
+Path+对象也可以用于正图中进行位置评估，决定一个遍历在某个点是否继续和某个点是否被包含在结果中。

=== PathExpander/RelationshipExpander ===

遍历查询框架用PathExpanders（取代RelationshipExpander）查找在遍历查询中从一个特别的路径到更多的分支应跟随的关系。

=== Expander ===

注入+RelationshipExpander+的关系的一个更通用的版本，定义了所有要被遍历节点的所有关系。
默认情况下，一个http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html#emptyExpander[default expander]被使用，这个时候任何关系的方向都不考虑。

有另外一个实现方法，担保遍历的关系类型都在http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/OrderedByTypeExpander.html[order of relationship type]中。

+Expander+接口是+RelationshipExpander+接口的一个扩展确保能自定义一个 +Expander+。
+TraversalDescription+用这个来提供方法定义遍历的关系类型，这是一个API用户用来定义一个 +RelationshipExpander+不常用的方法 -- 在+TraversalDescription+内部构造它。

通过Neo4j遍历查询框架提供的所有RelationshipExpanders也实现了Expander接口，因为它之包含一个方法 -- 这个方法从一个路径/节点获取关系，Expander接口增加的方法只能用于构件新的Expanders。

:leveloffset: 3

include::{docdir}/examples/dev/examples/how-to-use-the-traversal-framework.asciidoc[]

