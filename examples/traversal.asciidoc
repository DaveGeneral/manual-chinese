[[tutorials-java-embedded-traversal]]
遍历查询
===

了解更多关于遍历查询的信息，请参考：<<tutorial-traversal>>。

了解更多关于遍历查询范例的信息，请参考：<<data-modeling-examples>>。

== 黑客帝国 ==

对于上面的黑客帝国范例的遍历查询，这次使用新的遍历API：

[TIP]
范例源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/NewMatrix.java[NewMatrix.java]

.朋友以及朋友的朋友
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=get-friends
----

让我们只想一次真实的遍历查询并打印结果：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=friends-usage
----

输出结果：

include::matrix-traversal-java-new-friends.asciidoc[]

.谁编写了黑客帝国？
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find-hackers
----

打印输出结果：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find--hackers-usage
----

现在我们知道是谁编写了黑客帝国:

include::matrix-traversal-java-new-hackers.asciidoc[]


=== 游走一个有序路径 ===

这个范例展示了如何通过一个路径上下文控制一条路径的表现。

[TIP]
范例源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/orderedpath/OrderedPath.java[OrderedPath.java]

.创建一个图数据库
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=createGraph
----

["dot", "example-ordered-path.svg"]
----
A -> B [label="REL1" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
A -> C [label="REL2"]
B -> C [label="REL2" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
C -> D [label="REL3" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
----

// include when we have reltype colors
// include::ordered-path-java-graph.asciidoc[]
// then, also include the property setting in the code.

现在，关系 ( +REL1+ -> +REL2+ -> +REL3+ ) 的顺序保存在 一个 +ArrayList+ 对象中。
当遍历的时候，+Evaluator+ 能针对它进行检查，确保只有拥有预定义关系顺序的路径才会被包括并返回：

.定义如何游走这个路径
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=walkOrderedPath
----

.执行一次遍历查询并返回结果
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=printPath
----

输出结果:

include::ordered-path-java-output.asciidoc[]

在这种情况下我们使用一个自定义类来格式化路径输出。
下面是它的具体实现：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=pathPrinter
----

为了了解更多关于 +Path+ 的有选择的输出的细节，请参考：http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html[Traversal]类。


[NOTE]
下面的范例使用了一个已经废弃的遍历API。
它与新的遍历查询API共享底层实现，所以它们的性能是一样的。
比较起来它提供的功能非常有限。

== 老的遍历查询 API ==

这是我们想遍历查询的第一个图数据库：

image::examples-matrix.png[title="黑客帝国节点空间预览", scaledwidth="75%"]

[TIP]
范例源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/embedded-examples/src/main/java/org/neo4j/examples/Matrix.java[Matrix.java]

.朋友以及朋友的朋友
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=get-friends
----

让我们执行一次真实的遍历查询并打印结果：

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=friends-usage
----

下面是输出结果：

include::matrix-traversal-java-friends.asciidoc[]

.是谁编写了黑客帝国呢?
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=find-hackers
----
    
输出结果：    

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/Matrix.java
tag=find--hackers-usage
----

现在我们知道是谁编写了黑客帝国:

include::matrix-traversal-java-hackers.asciidoc[]
