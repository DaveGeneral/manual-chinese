[[configuration-caches]]
Neo4j的缓存设置
==========

关于如何进行关于Neo4j的自定义配置，请参考： <<configuration-introduction>>。

Neo4j使用两个不同类型的缓存：
一个文件缓冲区和一个对象缓冲区。
文件缓冲区以相同格式存储文件因为它们存储在持久存储介质上。
对象缓存区缓存节点，关系和属性，它们的存储格式是以高速读写为目标做优化后的结果。


文件缓冲区
-----

.要点
***
* 文件缓冲区有时被称为 _低级缓存_ 或者 _文件系统缓存_ 。
* 它缓存Neo4j数据在持久化介质上面。
* 如果可以的话，图使用操作系统内存映射特性。
* Neo4j会自动配置缓存只要JVM的堆尺寸配置适当。
***

文件缓冲区以相同格式存储文件因为它们存储在持久存储介质上。
这个缓冲层的目的是提示读写性能。文件缓冲区通过写到缓存来提示写的性能，
直到逻辑日志发生翻转才真正写入。
这种行为是安全的因为所有的事务总是在写入操作时已经写入了逻辑日志了，这个日志可以用来恢复存储的文件。

因为缓存操作与涉及到的数据紧紧关联在一起，Neo4j数据表示形式的简短描述有必要在后台处理。
Neo4j存储数据在多个文件中而依赖文件系统来管控处理效率。
每一个Neo4j存储文件都包括某一类型的相同尺寸的记录：

[options="header",grid="none",frame="none",cols="<,>m,<", width="50%"]
|============================================
| Store file         | Record size | Contents
| nodestore          |         9 B | Nodes
| relstore           |        33 B | Relationships
| propstore          |        41 B | Properties for nodes and relationships
| stringstore        |       128 B | Values of string properties
| arraystore         |       128 B | Values of array properties
|============================================

为了存储数据是变长长度的数据，比如字符串和数组，数据以一个或者多个120B大小的块方式存储，并且使用者8B大小数据来管理。
这些块的大小实际上可以在存储的时候通过参数 `string_block_size` 和 `array_block_size` 配置来创建。
每一个记录类型的尺寸也可以用来计算一个Neo4j图数据库的存储需求或者每一个文件缓冲区的最接近的缓存大小。
主意一些字符串和数组也可以不以字符串或者数组的方式存储，请参考： <<short-strings>> and <<short-arrays>>。

Neo4j使用多个文件缓冲区，每一个服务都对应一个不同的存储文件。
每一个文件缓冲区都切分它们的存储文件成一系列相同大小的窗口。
没一个缓冲窗口包含一系列存储记录。
缓冲区控制在内存中的最大的活动缓冲窗口并且追踪它们的命中率和丢失率。
当一个未缓存窗口的命中率大于了一个缓存窗口的丢失率的时候，这个缓存窗口会被驱逐而会被之前未缓存的窗口取代。

IMPORTANT: 注意快尺寸只能在存储创建时间时配置。

配置
~~

[options="header",frame="none",cols="<35m,<30,<35"]
|========================================================
| Parameter                 | Possible values   | Effect
| use_memory_mapped_buffers | `true` or `false` |
  If set to `true` Neo4j will use the operating systems memory mapping functionality for the file buffer cache windows.
  If set to `false` Neo4j will use its own buffer implementation.
  In this case the buffers will reside in the JVM heap which needs to be increased accordingly.
  The default value for this parameter is `true`, except on Windows.
| neostore.nodestore.db.mapped_memory             .7+^.^|
  The maximum amount of memory to use for memory mapped buffers for this file buffer cache.
  The default unit is `MiB`, for other units use any of the following suffixes: `B`, `k`, `M` or `G`.
  |
  The maximum amount of memory to use for the file buffer cache of the node storage file.
| neostore.relationshipstore.db.mapped_memory           |
  The maximum amount of memory to use for the file buffer cache of the relationship store file.
| neostore.propertystore.db.index.keys.mapped_memory    |
  The maximum amount of memory to use for the file buffer cache of the something-something file.
| neostore.propertystore.db.index.mapped_memory         |
  The maximum amount of memory to use for the file buffer cache of the something-something file.
| neostore.propertystore.db.mapped_memory               |
  The maximum amount of memory to use for the file buffer cache of the property storage file.
| neostore.propertystore.db.strings.mapped_memory       |
  The maximum amount of memory to use for the file buffer cache of the string property storage file.
| neostore.propertystore.db.arrays.mapped_memory        |
  The maximum amount of memory to use for the file buffer cache of the array property storage file.
| string_block_size .2+^.^| The number of bytes per block. |
  Specifies the block size for storing strings.
  This parameter is only honored when the store is created, otherwise it is ignored.
  Note that each character in a string occupies two bytes, meaning that a block size of 120 (the default size) will hold a 60 character long string before overflowing into a second block.
  Also note that each block carries an overhead of 8 bytes.
  This means that if the block size is 120, the size of the stored records will be 128 bytes.
| array_block_size        |
  Specifies the block size for storing arrays.
  This parameter is only honored when the store is created, otherwise it is ignored.
  The default block size is 120 bytes, and the overhead of each block is the same as for string blocks, i.e., 8 bytes.
| dump_configuration | `true` or `false` | If set to `true` the current configuration settings will be written to the default system output, mostly the console or the logfiles.
|========================================================

当内存映射缓冲区配置 (`use_memory_mapped_buffers = true`) 来在使用时，JVM的堆大小必须小于计算机整个可以使用的内存，要减去用于文件缓冲区的内存大小。
当堆缓冲区配置 (`use_memory_mapped_buffers = false`) 来在使用时，JVM的堆大小必须足够大以包括所有的缓冲区，加上应用和对象缓冲的实时堆内存需求。

Neo4j在启动时读取配置参数，并且自动配置哪些没有指定的参数。
缓冲大小会基于计算机上可以使用的内存大小来配置，以决定JVM堆该用多大，存储文件该用多大的内存等。

对象缓冲区
-----

.要点
***
* 对象缓冲有时被成为 _高级缓存_ 。
* 它缓存Neo4j的数据以一种更加优化便于高速遍历的格式存储。
***

对象缓冲区以一种便于高速遍历的格式缓存节点和关系以及它们的属性。
在Neo4j中有两个不同类别的对象。

其中之一是参考缓存。
这儿，Neo4j将利用它能从分配的JVM的内存中获取尽可能多的用于缓存对象，依赖于在一个LRU方式驱逐缓存的垃圾收集方式。
然而要主意Neo4j是在和JVM上面其他对象在 "竞争" 堆空间的，比如你有一个应用以嵌入模式部署，在应用需要更多内存时，Neo4j会让需要更少内存的应用获得 "胜利" 。

NOTE: 在下面描述的GC耐高速缓存只在Neo4j企业版中可以使用。

另外一种是 _GC耐高速缓存_ 它会从JVM的堆空间获取一固定大小的内存，当对象存储超过了这个空间时，它会自动清理。
分配最大的内存给它以便所有缓存对象都在里面而不会超出。
当最大内存被耗尽时，对象将被清理，而不依赖GC的决定。
这个在堆上与其他对象的竞争让GC-pauses能被更好的控制，因为缓存分配一个最大空间的堆空间使用。
与参考缓存相比，GC耐高速缓存的开销更小，插入/查询的速度更快。

[TIP]
对于java垃圾收集器来说，堆内存的使用是一个方面 -- 依赖于缓存类型而释放需要更大的堆空间。
因此，分配一个大尺寸堆给Neo4j并不总是一个最好的策略因为它可能导致长时间的GC-pauses。
相反应该留一些空间给Neo4j的文件系统缓存。
这些都是超出堆和内核的直接控制下，因此更有效率。

这个缓存中的内容发展成面向支持Neo4j的API和图形遍历的对象。
从这个缓存读数据比从文件系统缓存快5~10倍。
这个缓存被包括在JVM的堆上，而大小跟当前可以使用的堆内存的总量适应。

节点和关系只要它们被访问就会被加入对象缓存中。
然而缓存对象是被懒填充的。
一个节点或者关系的属性不会被加载直到属性被访问。
字符串（和数组）属性不会被加载直到该指定属性被访问。
一个指定节点的关系也不会被加载直到该关系被访问。


配置
~~

对象缓冲区主要的配置参数就是 `cache_type` 。
这指定了对象缓存由哪一个缓存来实现。
对象缓冲区主要存在两个缓存实例，一个是用于节点而一个是用于关系。
可以采用的缓存类型有：

[options="header",frame="none",cols="<15m,<85"]
|==========================================
| `cache_type` | Description
| none         | Do not use a high level cache. No objects will be cached.
| soft         | Provides optimal utilization of the available memory.
                 Suitable for high performance traversal.
                 May run into GC issues under high load if the frequently accessed parts of the graph does not fit in the cache.

                 This is the default cache implementation.
| weak         | Provides short life span for cached objects.
                 Suitable for high throughput applications where a larger portion of the graph than what can fit into memory is frequently accessed.
| strong       | This cache will hold on to *all data* that gets loaded to never release it again.
                 Provides good performance if your graph is small enough to fit in memory.
| gcr          | Provides means of assigning a specific amount of memory to dedicate to caching loaded nodes and relationships.
                 Small footprint and fast insert/lookup. Should be the best option for most scenarios. See below on how to configure it.
                 Note that this option is only available in the Neo4j Enterprise Edition.
|==========================================

GC耐高速缓存配置
~~~~~~~~~

因为GC高速缓存操作了JVM中一个最大的区域，每次使用的时候都会被配置用于优化性能。
有两个方面的缓存大小。

一个是对象被放到缓存的数组索引的大小。
它被指定为一小部分堆，比如指定 +5+ 表示让数组占用整个堆的5%的空间。
增加这个指数（直到最大的10）会减少消耗更多的堆用于哈希碰撞的机会。
更多的碰撞意味着来自低级缓存的更多的冗余对象加载。

[options="header",frame="none",cols="<15m,<70,<15m"]
|==========================================
| `configuration option`            | Description (what it controls)                                                                 | Example value
| node_cache_array_fraction         | Fraction of the heap to dedicate to the array holding the nodes in the cache (max 10).         | 7
| relationship_cache_array_fraction | Fraction of the heap to dedicate to the array holding the relationships in the cache (max 10). | 5
|==========================================

另外一个方面是在缓存中的所有对象的尺寸。它以字节为单位指定。比如 +500M+ 或者 +2G+ 等。
在要接近最大尺寸时一个 +清场+ 操作将被执行，随机对象将被逐出内存直到最大尺寸降低到90%以下。
最大尺寸的最优化设置依赖于你的图数据库的大小。
配置最大尺寸应该留足够的空间给在JVM共存的其他对象使用，但在同一时间，应该大到足以保持在最低限度的从低级缓存加载的存储需求。
在JVM上的预测负载以及域级别的对象的布局也应该考虑到。

[options="header",frame="none",cols="<15m,<70,<15m"]
|==========================================
| `configuration option`   | Description (what it controls)                                           | Example value
| node_cache_size          | Maximum size of the heap memory to dedicate to the cached nodes.         | 2G
| relationship_cache_size  | Maximum size of the heap memory to dedicate to the cached relationships. | 800M
|==========================================

你可以从下面的地址阅读Sun HotSpot的JVM配置和参考：

* http://weblogs.java.net/blog/enicholas/archive/2006/05/understanding_w.html[Understanding soft/weak references]

* http://jeremymanson.blogspot.com/2009/07/how-hotspot-decides-to-clear_07.html[How Hotspot Decides to Clear SoftReferences]

* http://www.oracle.com/technetwork/java/hotspotfaq-138619.html#gc_softrefs[HotSpot FAQ]


堆内存使用
~~~~~

下面的表格可以用来计算在一个64位的JVM上面，对象缓存会占据多少内存：

[options="header",frame="none",cols="<15,<15e,<70e"]
|================================
| Object           | Size      | Comment
.5+| Node          .+>m| 344 B | Size for each node (not counting its relationships or properties).
                   .+>m|  48 B | Object overhead.
                   .+>m| 136 B | Property storage (ArrayMap `48B`, HashMap `88B`).
                   .+>m| 136 B | Relationship storage (ArrayMap `48B`, HashMap `88B`).
                   .+>m|  24 B | Location of first / next set of relationships.
.3+| Relationship  .+>m| 208 B | Size for each relationship (not counting its properties).
                   .+>m|  48 B | Object overhead.
                   .+>m| 136 B | Property storage (ArrayMap `48B`, HashMap `88B`).
.5+| Property      .+>m| 116 B | Size for each property of a node or relationship.
                   .+>m|  32 B | Data element -- allows for transactional modification and keeps track of on disk location.
                   .+>m|  48 B | Entry in the hash table where it is stored.
                   .+>m|  12 B | Space used in hash table, accounts for normal fill ratio.
                   .+>m|  24 B | Property key index.
.4+| Relationships .+>m| 108 B | Size for each relationship type for a node that has a relationship of that type.
                   .+>m|  48 B | Collection of the relationships of this type.
                   .+>m|  48 B | Entry in the hash table where it is stored.
                   .+>m|  12 B | Space used in hash table, accounts for normal fill ratio.
| Relationships    .+>m|   8 B | Space used by each relationship related to a particular node (both incoming and outgoing).
| Primitive        .+>m|  24 B | Size of a primitive property value.
| String           .+>m|  64+B | Size of a string property value. `64 + 2*len(string) B` (64 bytes, plus two bytes for each character in the string).
|================================

