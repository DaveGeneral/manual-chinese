
[[performance-guide]]
性能向导
====

这是Neo4j性能优化向导。它将引导你如何使用Neo4j来达到最佳性能。

== 首先尝试 ==

首先需要做的事情就是确保JVM运行良好而没有浪费
大量的时间来进行垃圾收集。
监视使用Neo4j的一个应用的堆使用可能有点混乱，
因为当内存充裕时Neo4j会增加缓存，而相反会减少缓存。
目标就是有一个足够大的堆来确保一个重型加载不会导致调用GC收集
（如果导致GC收集，那么性能将降低高达两个数量级）。 

使用标记 +-server+ 和 +-Xmx<good sized heap>+ 
(f.ex. -Xmx512M for 512Mb memory or -Xmx3G for 3Gb memory)来启动JVM。
太大的堆尺寸也会伤害性能，因此你可以反复尝试下不同的堆尺寸。
使用 parallel/concurrent 垃圾收集器 (我们发现使用 +-XX:+UseConcMarkSweepGC+ 在许多情况下使用良好) 

最后，确保操作系统有一些内存来管理属性文件系统缓存,
这意味着如果你的系统有8G内存就不要使用全部的内存给堆使用（除非你关闭内存映射缓冲区）
而要留一个适合大小的内存给系统使用。
要了解更多详情，请参考： <<embedded-configuration>>。

对于Linux特有的调优，请参考： <<linux-performance-guide>>。

== Neo4j 基础元素的生命周期 ==

Neo4j根据你使用Neo4j的情况来管理它的基础元素（节点，关系和属性）。
比如如果你从来都不会从某一个节点或者关系那儿获取一个属性，
那么节点和关系将不会加载属性到内存。
第一次，在加载一个节点或者关系后，
任何属性都可以被访问，所有的属性都加载了。
如果某一个属性包含一个数组大于一些常规元素或者包含一个长字符串，
在请求是需要进行切分。
简单讲，一个节点的关系只有在访问这个节点的第一次被加载。

节点和关系使用LRU缓存。如果你（因为一些奇怪的原因）只需要使用节点工作，
那关系缓存会变得越来越小，
而节点缓存会根据需要自动增长。
使用大量关系和少量节点的应用会导致关系数据占用缓存猛增而节点占用缓存会越来越小。

Neo4j API 规范并没有描述任何关于关系的顺序，所以调用

[source,java]
----
Node.getRelationships()
----

会与之前的调用相比以不同顺序返回关系。
这允许我们做更多的优化来
返回最需要遍历的关系。

在Neo4j的所有元素都设计来根据实际使用来自动适配。 The (unachievable) overall goal is 
to be able to handle any incoming 
operation without having to go down and work with the file/disk I/O layer.

== 配置Neo4j ==

在<<embedded-configuration>>章节有很多关于对Neo4j和JVM配置的信息。
这些设置有很多对性能的影响。

=== 磁盘, 内存和其他要点 ===

一如往常，和任何持久持久化持久方案持久一样，性能非常依赖持久化存储设备的。
更好的磁盘就会有更好的性能。

如果你有多个磁盘或者其他持久化介质可以使用，
切分存储文件和事务日志在这些磁盘上是个不错的主意。
让存储文件运行在低寻址时间的磁盘上对于非缓存的读操作会有非常优秀的表现。
在今天一个常规的机械磁盘平均查询时间是5ms，
如果可以使用的内存非常少额或者缓存内存映射设置不当的话，
这会导致查询或者遍历操作变得非常慢。
一个新的更好的打开了SSD功能的SATA磁盘平均查询时间少于100微妙，
这意味着比其他类型的速度快呀倍以上。

为了避免命中磁盘你需要更多的内存。
在一个标准机械磁盘上你能用1-2GB的内存管理差不多几千万的Neo4j基础元素。
4-8GB的内存可以管理上亿的基础元素，
而如果你要管理数十亿的话，你需要16-32GB的样子。
然而，如果你投资一块好的SSD，
你将可以处理更大的图数据而需要更少的内存。

Neo4j喜欢Java 1.6 JVMs,如果你曾经没有或者至少没有使用-server标记，
以服务器模式运行的可以考虑升级到那个版本。
当你的应用运行时，使用 +vmstat+ 等工具收集信息。
如果你有很高的I/O等待，而当运行读写事务时没有很多块数据进出磁盘，
这是一个信号，表明你需要调整你的Java堆参数，Neo4j缓存以及内存映射设置
（也许需要配置更多的内存或者更好的磁盘）。

=== 写操作性能 ===

如果你在写入一些数据（刚开始很快，然后越来越慢）
后经历过慢速的写性能，
这可能是操作系统从存储文件的内存映射区域写出来脏页造成的。
这些区域不需要被写入来维护一致性
因此要实现最高性能的写操作，这类行为要避免。

另外写操作越来越慢的原因还可能是事务的大小决定的。
许多小事务导致大量的I/O写到磁盘的操作，这些应该避免。
太多大事务会导致内存溢出错误发生，
因为没有提交的事务数据一致保持在内存的Java堆里面。
关于Neo4j事务管理的细节，请参考：<<transactions>> 。

Neo4j内核使用一些存储文件和一个逻辑日志文件来存储图数据到磁盘。
存储文件包括实际的图数据而日志文件包括写操作。
所有的写操作都会被追加到日志文件中而当一个事务提交时，
会强迫(+fdatasync+)逻辑日志同步到磁盘。
然而存储文件不会强制写入到磁盘而也不仅仅是追加操作。
它们将被写入一个更大或者更小的随机模型中
（依赖于图数据库的布局）而写操作不会被强迫同步到磁盘。
除非日志发生翻转或者Neo4j内核关闭。
为逻辑日志目标增加翻转的大小是个不错的主意，
如果你在使用翻转日志功能时遇到写操作问题，
你可以考虑关闭日志翻转功能。
下面是一个范例演示如何正运行时改变日志翻转设置：

[source,java]
----
    GraphDatabaseService graphDb; // ... 

    // get the XaDataSource for the native store
    TxModule txModule = ((EmbeddedGraphDatabase) graphDb).getConfig().getTxModule();
    XaDataSourceManager xaDsMgr = txModule.getXaDataSourceManager();
    XaDataSource xaDs = xaDsMgr.getXaDataSource( "nioneodb" );
  
    // 关闭日志翻转
    xaDs.setAutoRotate( false );

    // 或者增加日志翻转目标尺寸为100MB (默认：10MB)
    xaDs.setLogicalLogTargetSize( 100 * 1024 * 1024L );
----
自从随机写到存储文件的内存映射区域会发生，
如果不需要，不要让数据写道磁盘是非常重要的。
一些操作系统在把脏页面数据写出到磁盘时有非常积极的设置规则。
如果操作系统决定开始写出这些内存映射区域的脏页面时，
写到磁盘的操作会停止连续的写，而变成随机。
这会大大降低性能，因此当用Neo4j时要确保最大的写性能，
必须确保，操作系统不会因为写到存储文件的内存映射区域
而导致写出任何脏页面数据。
举个例子，如果机器有8G的内存而存储文件一共有4G(完全可以内存映射)，操作系统必须被
配置来接受至少50%的脏页面在虚拟内存里面
以确保我们不会出现随机的磁盘写操作。

Note: 关于更多的规则信息，请参考： <<linux-performance-guide>> 。

=== 二级缓存 ===

当一般构建应用和“总是幻想图数据总是在内存里面”时，
有时很有必要优化某些关键区域的性能。
Neo4j增加了一个很小的过载甚至当你属于内存数据结构做比较时，
节点，关系或者有问题的属性都在缓存中。
如果这变成一个问题，请使用性能测试器找出它们的热点而然后增加你自己的二级缓存。
我们相信二级缓存应该能规避最大的扩展
因为它将强迫你小心处理有时非常难的无效数据。
但当其他事情都失败时，你必须使用它，
因此这是一个范例演示如何使用它。

我们有一些POJO，封装了一个节点和它的状态。
在这个特殊的POJO中，我们重载了相同的实现。

[source,java]
----
   public boolean equals( Object obj )
   {
       return underlyingNode.getProperty( "some_property" ).equals( obj );
   }

   public int hashCode()
   {
       return underlyingNode.getProperty( "some_property" ).hashCode();
   }
----

这会在许多场景都运行得非常好，但在这个特殊的场景下，那个POJO的许多实例都会递归调用 adding/removing/getting/finding 来收集类。性能优化器探测这个应用后会发行相同的实现会被反复调用而这个可以别看作一个热点。为这个相同的重载增加二级缓存将在这个特殊的场景增加性能。

[source,java]
----
    private Object cachedProperty = null;
    
    public boolean equals( Object obj )
    {
       if ( cachedProperty == null )
       {
           cachedProperty = underlyingNode.getProperty( "some_property" );
       }
       return cachedProperty.equals( obj );
    }

    public int hashCode()
    {
       if ( cachedPropety == null )
       {
           cachedProperty = underlyingNode.getProperty( "some_property" );
       }
       return cachedProperty.hashCode();
    }
----

现在的问题是，我们需要废除缓存属性
而不管 +some_property+ 在什么时候发生改变。
（可能在这个场景是一个问题因为状态是相同的而hash code计算经常都不会改变）。

[TIP]
总结，尽可能的回避使用二级缓存除非你真的需要它。
