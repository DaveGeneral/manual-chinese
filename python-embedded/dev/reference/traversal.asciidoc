[[python-embedded-reference-traversal]]
遍历查询
====

[WARNING]
在neo4j-embedded for python中支持的遍历查询在Neo4j 1.7 GA已经废弃了。
请参考 <<python-embedded-reference-cypher>> 或者用核心API代替。
因为遍历查询框架要求在JVM和python直接有一个紧密的耦合，所以为了提升性能，我们需要打破这个耦合。


下面的文档在neo4j-embedded 1.8中被移除了，而对遍历的支持在neo4j-embedded 1.9已经被删除了。

在这使用的遍历查询API本质上和Java API中的是一样的，略有一点修改。

遍历查询开始于一个给定的节点而使用大量的规则在图中移动以便找到我们想要的部分。

== 基本的遍历查询 ==

=== 跟随一个关系  ===

最基本的遍历查询简单的跟随某一个关系类型，而返回他们遇到的一切。
默认情况下，莫个节点都只会被访问一次所以他们没有死循环的风险。

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=basicTraversal
classifier=test-sources
----

=== 在一个特定的方向跟随一个关系 ===

你可以告诉遍历查询你只跟随某一方向的关系

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=directedTraversal
classifier=test-sources
----

=== 跟随多个关系类型 ===

你能指定无数的关系类型以及方向来跟随。

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=multiRelationshipTraversal
classifier=test-sources
----

== 遍历查询结果 ==

一个遍历查询能给你三个不同的结果之一：<<python-embedded-core-nodes,nodes>>， <<python-embedded-core-relationships,relationships>> 或者 <<python-embedded-core-paths,paths>>。

遍历查询是懒加载执行的，意味着只有当你轮循结果集时才会真正的去遍历。

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=traversalResults
classifier=test-sources
----

== 唯一性 ==

为了避免无限死循环，定义在遍历中可以重新访问的部分是非常重要的。
默认情况下，唯一性参数设置为： +NODE_GLOBAL+，这意味着每个节点只能被访问一次。

这儿有一些其他设置可以使用。

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=uniqueness
classifier=test-sources
----

== 顺序 ==

你能通过宽度优先或者深度优先遍历。深度优先是默认使用的，因为他消耗更少的内存。


[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=ordering
classifier=test-sources
----

== 评估器 - 高级过滤器 ==

为了能在其他条件下遍历，比如节点属性，或者更复杂的比如邻居节点或者模式，我们都需要使用评估器。
一个评估器是一个将一个路径作为参数的普通Python方法，返回下一个将要做的事情的描述。


路径参数是遍历器当前的位置，而我们下一步能做的事情是下面四种之一，就像下面的范例一样。

[snippet,python]
----
component=neo4j-python-embedded
source=traversal.py
tag=evaluators
classifier=test-sources
----

