[[python-embedded-tutorial-invoiceapp]]
一个使用遍历查询和索引的范例应用
================

要了解这里用到的一些概念的详细文档，请参考： ##python-embedded-reference-indexes## 和 ##python-embedded-reference-traversal## 。

这个范例展示了如何开始构建一些像使用Neo4j的简单缴费跟踪程序。

我们开始引入Neo4j，并创建一些我们将用来组织我们实际数据的meta数据。

[snippet,python]
----
component=neo4j-python-embedded
source=examples.py
tag=invoiceapp-setup
classifier=test-sources
----

== 域逻辑 ==

然后我们定义一些我们的应用能执行的域逻辑。我们的应用有连个域对象，客户和缴费单。让我们创建一些方法来新增客户和缴费单。
 
[snippet,python]
----
component=neo4j-python-embedded
source=examples.py
tag=invoiceapp-domainlogic-create
classifier=test-sources
----

在客户这方面，我们创建一个新的节点来表示客户并把他连接到 _客户集_ 节点。这会帮助我们稍后查找客户以及判定节点是否表示是客户。
 
我们也用客户的名称做索引，为了能快速的通过客户的名字找到客户。

在缴费单这方面，我们也做相同的动作，除了没有索引。我们也连接一个新的缴费单到发送这个缴费单的客户节点上面，并定义这个关系的类型为：+SENT_TO+ 。

下一步，我们想能接收到我们新增的客户和缴费单。因为我们用了客户的名称做索引，因此找到他们是非常简单的。

[snippet,python]
----
component=neo4j-python-embedded
source=examples.py
tag=invoiceapp-domainlogic-get-by-idx
classifier=test-sources
----

让我们说我们也喜欢做一些类似于找到给定客户的所有大于某一金额的所有缴费单的事情。这应该通过写一个遍历查询器来完成，像下面这样：

[snippet,python]
----
component=neo4j-python-embedded
source=examples.py
tag=invoiceapp-domainlogic-get-by-traversal
classifier=test-sources
----

== 创建数据并返回他们 ==

把他们放在一起，我们就能创建客户和缴费单了，并且使用我们写的查询方法找到他们。

[snippet,python]
----
component=neo4j-python-embedded
source=examples.py
tag=invoiceapp-create-and-search
classifier=test-sources
----

