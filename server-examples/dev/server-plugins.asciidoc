[[server-plugins]]
服务器插件 
=====

.内容提示
***********
* 服务器的功能可以通过增加插件的方式来增强。
* 插件是用户自己编码完成的，以便增强数据库，节点以及属性的功能。
* Neo4j服务器在与客户端通过HTTP方式进行交互时使用这些自定义插件。
***********

插件提供了一种增加Neo4j Rest API新功能的很好的方式，而不需要去从新发明你自己的API。
作为在服务端运行的脚本，插件可以用于接受和维护节点，关系，路径，属性以及指数。

[TIP]
如果你想完全控制你的API，你需要多花心思，并理解这样做的风险，而Neo4j服务端也可以通过JAX-RS提供<<server-unmanaged-extensions,非托管的扩展>>。

涉及到的类在jar包http://search.maven.org/#search|gav|1|g%3A%22org.neo4j%22%20AND%20a%3A%22server-api%22[org.neo4j:server-api]中，
看看下载页面的链接地址，介绍了如何引入。
对于一个Maven工程，新增 服务端 API依赖到你的工程中，你可以修改 +pom.xml+ 像下面这样：

[source,xml]
----
<dependency>
  <groupId>org.neo4j</groupId>
  <artifactId>server-api</artifactId>
  <version>${neo4j-version}</version>
</dependency>
----

_ $\{neo4j-version}  是一个版本号。_

为了创建插件，你的代码必须继承类： http://components.neo4j.org/server-api/{neo4j-version}/apidocs/org/neo4j/server/plugins/ServerPlugin.html[ServerPlugin] 。
你的插件必须做到下面几点：

* 确定插件可以产生一个（一组）节点，关系或者路径，或者任何Java原生类型以及字符串
* 可以指定参数，
* 可以指定一个扩展点
* 包括应用逻辑。
* 确定在 +@PluginTarget+ 和 +@Source+ 参数中可以发现类型。

// link Node/Rel/Path javadocs here?

下面是一个插件的范例，参数是数据库（也可以是节点或者关系）：

.获取所有节点和关系的插件
[snippet,java]
----
component=neo4j-server-examples
source=org/neo4j/examples/server/plugins/GetAll.java
tag=GetAll
classifier=sources
----

完整源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/server-examples/src/main/java/org/neo4j/examples/server/plugins/GetAll.java[GetAll.java]

.找到两点之间最短距离的插件
[snippet,java]
----
component=neo4j-server-examples
source=org/neo4j/examples/server/plugins/ShortestPath.java
tag=ShortestPath
classifier=sources
----

完整源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/server-examples/src/main/java/org/neo4j/examples/server/plugins/ShortestPath.java[ShortestPath.java]

为了部署代码，可以简单的编译成.jar 文件并把他放到服务器的classpath下面（按照惯例，插件目录在Neo4j 服务端的主目录下面）。

[TIP]
确保通过Maven或者 `jar -cvf myext.jar *`编译时，目录列表被保留在jar文件中，
确定jar目录代替指定的单个文件。

 '.jar' 文件必须包括 'META-INF/services/org.neo4j.server.plugins.ServerPlugin' 。
 这是一个范例，有多个入口，每一个都在下面独立的一行：

[source]
----
include::../org.neo4j.server.plugins.ServerPlugin[]
----

上面的代码让一个扩展在接收来自Neo4j 服务端的服务时，
总是在数据库中可见（通过 +@PluginTarget+ 注解）。
简单的改变 +@PluginTarget+ 参数成 +Node.class+ 或者 +Relationship.class+ ，就可以让我们轻松的切换到我们希望的其他数据模型。
通过插件提供的功能性扩展会自动生效的。
比如，客户端与服务端交互时，可以通过上面的插件提供的扩展，
更早的检查他们接收到的反馈。比如在默认数据库URI上发送一个 +GET+ 请求：
 
[source, shell]
----
curl -v http://localhost:7474/db/data/
----

// test the above!

对于 +GET+ 请求的反馈是默认情况下会是一个JSON数据，
里面有一属性”extensions“，列出了所有可以使用的插件。
在下面例子中，我们只有 +GetAll+ 插件注册到了服务端，所以只有他的扩展功能是可以使用的。
扩展名如果没有通过 +@Name+ 指定的话会被自动分配，基于方法名。

[source, javascript]
----
{
"extensions-info" : "http://localhost:7474/db/data/ext",
"node" : "http://localhost:7474/db/data/node",
"node_index" : "http://localhost:7474/db/data/index/node",
"relationship_index" : "http://localhost:7474/db/data/index/relationship",
"reference_node" : "http://localhost:7474/db/data/node/0",
"extensions_info" : "http://localhost:7474/db/data/ext",
"extensions" : {
  "GetAll" : {
    "get_all_nodes" : "http://localhost:7474/db/data/ext/GetAll/graphdb/get_all_nodes",
    "get_all_relationships" : "http://localhost:7474/db/data/ext/GetAll/graphdb/getAllRelationships"
  }
}
----

// generate the above output from a test
 
在两个扩展URI上面做 +GET+ 请求获取meta信息：

[source, shell]
----
curl http://localhost:7474/db/data/ext/GetAll/graphdb/get_all_nodes
----

// try this one as well!

[source, javascript]
----
{
  "extends" : "graphdb",
  "description" : "Get all nodes from the Neo4j graph database",
  "name" : "get_all_nodes",
  "parameters" : [ ]
}
----

为了使用它，需要 +POST+ 到这个地址，并带上指定的参数和JSON数据。
比如我们调用 +shortest path+ 扩展（URI通过发送 +GET+ 请求到 http://localhost:7474/db/data/node/123 获取 ）：
[source,bash]
----
curl -X POST http://localhost:7474/db/data/ext/GetAll/node/123/shortestPath \
  -H "Content-Type: application/json" \
  -d '{"target":"http://localhost:7474/db/data/node/456&depth=5"}'
---- 
如果一切顺利，将返回状态码： +200+ 和一些0或者更多的数据。
如果没有任何返回，将返回状态码： +204+ 。
如果扩展出现异常，将返回状态码： +500+ 以及异常错误信息。

那些需要进行写操作的扩展必须管理他们自己的事务。事务不能自动被管理的。

通过这个模型，任何插件都会很自然的适应任何Neo4j支持的超媒体 -- 
这意味着客户端在像节点，关系和路径这些抽象的一个简单的升级路径上占有优势，
因为服务端已经被插件增强了（老客户端不会）。

