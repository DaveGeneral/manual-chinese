[[server-unmanaged-extensions]]
非托管扩展 
=====

.内容提示
***********
* 危险：Men at Work!
  非托管扩展是部署随意的JAX-RS代码进Neo4j服务器的一种方式。  
* 非托管扩展更准确的说是：非托管。
  如果你把没有经过完整单元测试的代码放入了服务器，有很高的几率会降低服务器性能，所以请小心使用。
***********

一些工程希望更加友好的管控他们的服务端代码。为此，我们将介绍一些非托管API。

[WARNING]
这是一把双刃剑，它允许用户随意部署 http://en.wikipedia.org/wiki/JAX-RS[JAX-RS] 类到服务端，因此你要小心使用。
特别是你应该明白，他会轻易的就占用服务端的大量的堆空间，降低你可能不关心的服务端的性能。

当然，如果你了解这些，你可以简单的通过一个 +@Context+ 注解加入到你的代码，
然后把你的JAX-RS类编译成JAX-RS jar文件，加载进Neo4j服务端。然后增加你的类到运行时路径（classpath）中（只需要把他放到Neo4j服务端的目录中）。
你可以使用通过 +org.neo4j.server.logging.Logger+ 使用日志功能，获取Neo4j服务端的主机环境信息。

在你的代码中，你可以通过 +@Context+ 访问 +GraphDatabaseService+ ：

[source,java]
--------
public MyCoolService( @Context GraphDatabaseService database )
{
  // Have fun here, but be safe!
}
--------

记住，非托管API是一种非常高效的工具。
他是通过部署代码来影响服务器的最容易的方式，因此我们首先应该想到的是你不能优先使用非托管扩展。
然而，大量的上下文参数可以提供给你，像数据库引用。

为了指定你的扩展的挂载点，完整的类应该像这样：

.非托管扩展范例
[snippet,java]
----
component=neo4j-server-examples
source=org/neo4j/examples/server/unmanaged/HelloWorldResource.java
tag=HelloWorldResource
classifier=sources
----

范例源代码下载地址：
https://github.com/neo4j/community/blob/{neo4j-git-tag}/server-examples/src/main/java/org/neo4j/examples/server/unmanaged/HelloWorldResource.java[HelloWorldResource.java]

编译这些代码，并把编译的jar文件（包括其他任何依赖包）放到 +$NEO4J_SERVER_HOME/plugins+ 目录中，包括在 +neo4j-server.properties+ 文件中的类。像下面这样：

[TIP]
确保通过Maven或者 `jar -cvf myext.jar *` 构建的jar文件包括了目录清单，
确保用jar目录代替单个文件。


[source]
------
#包含JAXRS资源的JAXRS包被逗号分隔开，一个包名对应一个挂载点。
org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged
------

将hello方法绑定到 +GET+ 后的地址是: +http://\{neo4j_server}:\{neo4j_port}/examples/unmanaged/helloworld/\{nodeId}+

[source,bash]
-----
curl http://localhost:7474/examples/unmanaged/helloworld/123
-----

输出结果：
  
[source]
----
Hello World, nodeId=123
----

