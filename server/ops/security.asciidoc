[[security-server]]
安全访问Neo4j服务器
============

== 加强端口和远程客户端连接请求的安全 ==

默认情况下，Neo4j服务端会捆绑一个Web服务器，服务在 +7474+ 端口，通过地址： http://localhost:7474/ 访问，不过只能从本地访问。

在配置文件 +conf/neo4j-server.properties+ 中：

[source]
----
# http port (for all data, administrative, and UI access)
org.neo4j.server.webserver.port=7474

#let the webserver only listen on the specified IP. Default
#is localhost (only accept local connections). Uncomment to allow
#any connection.
#org.neo4j.server.webserver.address=0.0.0.0
---- 

如果你需要能从外部主机访问，请在 +conf/neo4j-server.properties+ 中设置 +org.neo4j.server.webserver.address=0.0.0.0+ 来启用。

== 任意的代码执行 ==

默认情况下，Neo4j服务端是可以执行任意代码的。比如 ##Gremlin Plugin## 和 ##Traversals## REST endpoints。
为了让这些更安全一些，要么从服务端的类路径完全移除这些插件，要么通过代理或者授权的角色来访问哲学地址。
当然， http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/SecurityManager.html[Java Security Manager] 也可以用于让代码更加安全。

== HTTPS支持 ==

Neo4j服务端内建支持HTTPS进行SSL加密通讯。
服务端第一次启动时，他会自动生成一个自签名SSL证书和一个私钥。
因为这个证书是自签名的，在生产环境使用是不安全的，相反，你应该生成为生产服务器单独产生。

为了提供你自己的KEY和证书，取代生成的KEY和证书，或者通过改变 +neo4j-server.properties+ 的配置来充值你的证书和KEY的位置：

[source]
----
# Certificate location (auto generated if the file does not exist)
org.neo4j.server.webserver.https.cert.location=ssl/snakeoil.cert

# Private key location (auto generated if the file does not exist)
org.neo4j.server.webserver.https.key.location=ssl/snakeoil.key
----

注意这个KEY应该是不加密的。
确保你给私钥设置正确的权限，以至于只有neo4j服务端才有权限读取/写入它。

你可以设置https连接端口和配置文件中的一样，以及关闭/打开 https支持：

[source]
----
# Turn https-support on/off
org.neo4j.server.webserver.https.enabled=true

# https port (for all data, administrative, and UI access)
org.neo4j.server.webserver.https.port=443
----

== 服务端授权规则 ==

除了IP层面的限制，在Web服务器上管理员应该要求更高级的安全策略。
Neo4j服务端支持通过根据用户提供的证书来允许或者禁止管理员访问某些特点的功能。

为了实现在Neo4j 服务端在特定领域的授权策略，
可以实现安全规则并注册到服务端上。
这将排除轮训服务的可能的场景出现，比如给予安全和授权的用户和角色。

include::enforcing-server-authorization-rules.asciidoc[]
include::using-wildcards-to-target-security-rules.asciidoc[]

== 基于主机的脚本支持 ==

[IMPORTANT]
Neo4j服务端默认运行完全访问相关系统来暴露远程脚本功能。
不用实现一个安全层来暴露你的服务端构成了重大的安全漏洞。

== 深度安全 ==

虽然Neo4j服务端有大陆的内建安全特性（看上面的章节），对于安全更高的部署，使用像Apache的 `mod_proxy` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy.html] 来代理外部请求会更加安全的。

这样有很大的优势：

* 控制访问Neo4j服务端到特定的IP地址，URL模式以及IP范围。这可以用来保证只有 +/db/data+ 命名空间可以被非本地客户端访问，而 +/db/admin+ 空间只开发给特定的IP地址。
+
[source]
---------------
<Proxy *>
  Order Deny,Allow
  Deny from all
  Allow from 192.168.0
</Proxy>
---------------

当用Neo4j的 +SecurityRule+ 插件实现了功能需求后，比起开发插件，操作像Apache这样专业的配置服务器显得更好一些。然而，值得注意的是两种方法都要使用，他们会一起合作提供访问代理服务器和 +SecurityRule+ 插件的一致的行为。

* 在Linux/Unix系统中，在端口 < 1000 (比如端口80)以非ROOT用户运行Neo4j服务端，使用：
+
[source]
---------------
ProxyPass /neo4jdb/data http://localhost:7474/db/data
ProxyPassReverse /neo4jdb/data http://localhost:7474/db/data
---------------

* 在一个集群环境中，使用Apache `mod_proxy_balancer` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html] 实现简单的负载均衡。
+
[source]
--------------
<Proxy balancer://mycluster>
BalancerMember http://192.168.1.50:80
BalancerMember http://192.168.1.51:80
</Proxy>
ProxyPass /test balancer://mycluster
--------------

== 用一个代理重写URL规则 ==

当安装Neo4j服务端在代理服务器后面后，你需要启动JSON调用的重写规则，
否则他们将指向基于(一般是 http://localhost:7474 )的服务端。

为了实现这个，你可以使用 http://httpd.apache.org/docs/2.2/mod/mod_substitute.html[Apache mod_substitute]。

[source]
----
ProxyPass / http://localhost:7474/
ProxyPassReverse / http://localhost:7474/
<Location />
    AddOutputFilterByType SUBSTITUTE application/json
    AddOutputFilterByType SUBSTITUTE text/html
    Substitute s/localhost:7474/myproxy.example.com/n
    Substitute s/http/https/n
</Location>
----

